//def is_fe
//def is_be

def frontend_dir = "fe"
def backend_dir = "be"

def DOCKER_USER="preedus"
def APP_FE="testapp-fe"
def APP_FE_TAG="v1.1"

def APP_BE="testapp-be"
def APP_BE_TAG="v1.1"


def appBuild(dockerUser,imageName, tag){

//WARNING! Your password will be stored unencrypted in /root/.docker/config.json.
//https://docs.docker.com/engine/reference/commandline/login/#credentials-store
/*
    sh 'ls -la'
    withCredentials([usernamePassword(credentialsId: 'dockerhub-user', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
        sh "echo Building fe image dockerUser: $dockerUser/$imageName:$tag"
        sh "echo Building fe image USERNAME: $USERNAME/$imageName:$tag"
        sh "docker login -u $USERNAME -p $PASSWORD"
        sh "docker build -t $USERNAME/$imageName:$tag ."
        sh "docker push $USERNAME/$imageName:$tag"
        sh "docker logout"

    }
    */


    withCredentials([string(credentialsId: 'dockerhub-password', variable: 'PASSWORD')]) { 
        //sh "echo Building image $dockerUser/$imageName:$tag"
        echo "Building image $dockerUser/$imageName:$tag"
        //sh "docker login -u $dockerUser -p $PASSWORD"
        sh "echo $PASSWORD | docker login -u $dockerUser --password-stdin"
        sh "docker build -t $dockerUser/$imageName:$tag ."
        sh "docker push $dockerUser/$imageName:$tag"
        sh "docker logout"
    }

}

def appDeploy(dockerUser,imageName, tag){

    withCredentials([usernamePassword(credentialsId: 'kmaster-ssh', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
        sh "sshpass -p $PASSWORD scp -o StrictHostKeyChecking=no -r ../k8s $USERNAME@192.168.100.23:/tmp/k8s"
        sh """
            # sshpass -p $PASSWORD ssh $USERNAME@192.168.100.23 <<-END  END
            # sshpass -p $PASSWORD ssh $USERNAME@192.168.100.23 "
            sshpass -p $PASSWORD ssh -o StrictHostKeyChecking=no $USERNAME@192.168.100.23 "
                echo "Image tag: $tag"
                # kubectl kustomize /tmp/k8s/overlays/production | sed "s#preedus/$imageName:.*#preedus/$imageName:$tag#" | grep image
                kubectl kustomize /tmp/k8s/overlays/production | sed "s#preedus/$imageName:.*#preedus/$imageName:$tag#" |  kubectl apply -f -
                kubectl get pods
            "


        """

    }

}

pipeline {
    agent any
    
    environment {
        NEW_VERSION = '1.2.3'
    }
 
    stages {
    
    
        stage("pre-build") {
        
            steps {
                dir('tmpdir') {
    
                
                    //sh 'git clone https://github.com/PreeduS/Websocket .'
                                            
                        
                    script {
                                                     
                        env.is_fe=sh script:'git diff-tree --name-only --no-commit-id HEAD | grep -q fe && echo 0 || echo 1', returnStdout: true
                        env.is_be=sh script:'git diff-tree --name-only --no-commit-id HEAD | grep -q be && echo 0 || echo 1', returnStdout: true
                        
                        //env.is_be=sh script:'echo $(git diff-tree --name-only --no-commit-id HEAD | grep -q be && echo 0 || echo 1)', returnStdout: true
                    }    
                        
                    //sh 'echo is_fe post = $is_fe'
                    //sh 'echo is_be post = $is_be'
                    
                    sh '''
                        if [ $is_fe -eq 0 ]; then
                            echo "Is frontend $is_fe"
                        fi
                        if [ $is_be -eq 0 ]; then
                            echo "Is backend $is_be"
                        fi
                        if [ $is_fe -ne 0 -a $is_be -ne 0 ]; then 
                            echo "Nothing to build, exiting..."; 
                            #exit 0

                        fi

                    '''
                        
                        
                }
            
            
            }
        
        }
        stage("build") {
        
            steps {

                //echo "building version ${NEW_VERSION}"
                //echo "build is_fe = ${env.is_fe}"
                //echo "build is_be = ${env.is_be}"

            
                script {
                    env.FE_TAG = APP_FE_TAG
                    //'v1.1'
                }

                dir("tmpdir/$frontend_dir") {
                    /*
                    nodejs('node-12.16.3') {
                        sh 'npm install'
                        sh 'npm build'
                    }
                    */

                    //appBuild(DOCKER_USER, APP_FE, env.FE_TAG)
                }

                dir("tmpdir/$backend_dir") {
                    
                    //appBuild(DOCKER_USER, APP_BE, APP_BE_TAG)
                }
            

            }
            
        }
        stage("deploy") {
            steps {
                dir("tmpdir/$frontend_dir") {
                    appDeploy(DOCKER_USER, APP_FE, env.FE_TAG)
                }
                dir("tmpdir/$backend_dir") {
                    appDeploy(DOCKER_USER, APP_BE, APP_BE_TAG)
                }

            }
        }
        
    
    
    
    }
    post {
        always{
            //sh 'rm -rf tmpdir'
            sh "echo done"
        }
    }
    
}